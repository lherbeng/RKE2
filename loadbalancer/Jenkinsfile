pipeline {
    agent { label 'agent1' }

    environment {
        REPO_URL = 'https://github.com/lherbeng/RKE2.git'
        INSTALL_SCRIPT_PATH = 'loadbalancer/install_nginx.sh'
        UNINSTALL_SCRIPT_PATH = 'loadbalancer/uninstall_nginx.sh'
        SSL_SCRIPT_PATH = 'loadbalancer/generate_ssl.sh'
        SSL_LOG_SCRIPT_PATH = 'loadbalancer/generate_ssl_with_logs.sh'
        NGINX_CONFIG = 'loadbalancer/nginx.conf'
    }

    parameters {
        choice(
            name: 'ACTION',
            choices: ['install', 'uninstall'],
            description: 'Choose whether to install or uninstall LoadBalancer'
        )
        booleanParam(
            name: 'ENABLE_SSL',
            defaultValue: false,
            description: 'Check to enable SSL installation (basic)'
        )
        booleanParam(
            name: 'ENABLE_SSL_WITH_LOGS',
            defaultValue: false,
            description: 'Check to enable SSL installation with logs'
        )
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'üì¶ Checking out code from GitHub...'
                git url: "${REPO_URL}", branch: 'main'
            }
        }

        stage('Install nginx service') {
            when {
                expression { params.ACTION == 'install' }
            }
            steps {
                echo 'üîß Installing NGINX...'

                sh "chmod +x ${INSTALL_SCRIPT_PATH}"
                sh "./${INSTALL_SCRIPT_PATH}"

                // Backup and copy nginx.conf
                sh """
                    if [ -f /etc/nginx/nginx.conf ]; then
                        sudo mv /etc/nginx/nginx.conf /etc/nginx/nginx.conf.orig
                    fi
                    sudo cp ${NGINX_CONFIG} /etc/nginx/nginx.conf
                """

                script {
                    if (params.ENABLE_SSL || params.ENABLE_SSL_WITH_LOGS) {
                        def selectedScript = params.ENABLE_SSL_WITH_LOGS ? SSL_LOG_SCRIPT_PATH : SSL_SCRIPT_PATH

                        echo "üîê Running SSL script: ${selectedScript}"

                        sh """
                            sudo mkdir -p /etc/nginx/ssl
                            sudo chmod +x ${selectedScript}
                            sudo -E ./${selectedScript}
                        """

                        // üß™ Add deep SSL validation & debug output
                        sh """
                            echo 'üìç Jenkins workspace:'
                            pwd
                            echo 'üìÅ Listing workspace contents...'
                            ls -l

                            echo 'üìÅ Listing /etc/nginx/ssl contents...'
                            sudo ls -l /etc/nginx/ssl || echo '‚ùå /etc/nginx/ssl not found'

                            echo 'üßæ Preview SSL certificate content:'
                            sudo head -n 5 /etc/nginx/ssl/lgesite.com.crt || echo '‚ùå CRT file missing or unreadable'

                            echo 'üßæ Preview SSL key content:'
                            sudo head -n 5 /etc/nginx/ssl/lgesite.com.key || echo '‚ùå KEY file missing or unreadable'

                            echo '‚úÖ Verifying file existence...'
                            if [ ! -f /etc/nginx/ssl/lgesite.com.crt ] || [ ! -f /etc/nginx/ssl/lgesite.com.key ]; then
                                echo '‚ùå ERROR: Missing SSL cert or key file!' >&2
                                exit 1
                            fi
                        """
                    }
                }

                echo "üöÄ Testing and restarting NGINX after SSL is in place..."
                sh """
                    sudo nginx -t
                    sudo systemctl restart nginx
                """
            }
        }

        stage('Uninstall nginx service') {
            when {
                expression { params.ACTION == 'uninstall' }
            }
            steps {
                echo 'üßπ Uninstalling NGINX...'
                sh "chmod +x ${UNINSTALL_SCRIPT_PATH}"
                sh "./${UNINSTALL_SCRIPT_PATH}"
            }
        }
    }

    post {
        success {
            script {
                echo "‚úÖ NGINX service ${params.ACTION} completed successfully!"
            }
        }
        failure {
            script {
                echo "‚ùå NGINX service ${params.ACTION} failed!"
            }
        }
    }
}
