pipeline {
    agent { label 'agent1' }

    environment {
        REPO_URL = 'https://github.com/lherbeng/RKE2.git'
        INSTALL_SCRIPT_PATH = 'loadbalancer/install_nginx.sh'
        UNINSTALL_SCRIPT_PATH = 'loadbalancer/uninstall_nginx.sh'
        SSL_SCRIPT_PATH = 'loadbalancer/generate_ssl_with_logs.sh'
        NGINX_CONFIG = 'loadbalancer/nginx.conf'
    }

    parameters {
        choice(
            name: 'ACTION',
            choices: ['install', 'uninstall'],
            description: 'Choose whether to install or uninstall LoadBalancer'
        )
        booleanParam(
            name: 'ENABLE_SSL',
            defaultValue: false,
            description: 'Check to enable SSL installation'
        )
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out code from GitHub...'
                git url: "${REPO_URL}", branch: 'main'
            }
        }

        stage('Install nginx service') {
            when { expression { params.ACTION == 'install' } }
            steps {
                script {
                    try {
                        echo 'Installing NGINX...'
                        sh "chmod +x ${INSTALL_SCRIPT_PATH}"
                        sh "./${INSTALL_SCRIPT_PATH}"

                        sh """
                            if [ -f /etc/nginx/nginx.conf ]; then
                                sudo mv /etc/nginx/nginx.conf /etc/nginx/nginx.conf.orig.$(date +%Y%m%d%H%M%S)
                            fi
                        """
                        echo 'Copying nginx.conf to /etc/nginx/nginx.conf...'
                        sh """
                            sudo cp ${NGINX_CONFIG} /etc/nginx/nginx.conf
                            sudo nginx -t
                            sudo systemctl restart nginx
                        """

                        if (params.ENABLE_SSL) {
                            echo 'Installing SSL...'
                            sh """
                                sudo chmod +x ${SSL_SCRIPT_PATH}
                                if [ -f ${SSL_SCRIPT_PATH} ]; then
                                    ./${SSL_SCRIPT_PATH}
                                else
                                    echo "SSL script not found, skipping SSL installation."
                                fi
                            """
                        }
                    } catch (Exception e) {
                        echo "Error during installation: ${e.message}"
                        error "Installation failed."
                    }
                }
            }
        }

        stage('Uninstall nginx service') {
            when { expression { params.ACTION == 'uninstall' } }
            steps {
                echo 'Uninstalling NGINX...'
                sh "chmod +x ${UNINSTALL_SCRIPT_PATH}"
                sh "./${UNINSTALL_SCRIPT_PATH}"
            }
        }
    }

    post {
        success {
            echo "NGINX ${params.ACTION} operation completed successfully!"
        }
        failure {
            echo "NGINX ${params.ACTION} operation failed."
        }
    }
}
