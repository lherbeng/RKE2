pipeline {
    agent { label 'agent1' }

    environment {
        REPO_URL = 'https://github.com/lherbeng/RKE2.git'
        INSTALL_SERVER_SCRIPT = 'rancher/install_rke2_server.sh'
        UNINSTALL_SERVER_SCRIPT = 'rancher/uninstall_rke2_server.sh'
        INSTALL_AGENT_SCRIPT = 'rancher/install_rke2_agent.sh'
        UNINSTALL_AGENT_SCRIPT = 'rancher/uninstall_rke2_agent.sh'
        SET_KUBECONFIG_SCRIPT = 'rancher/set_kubeconfig.sh'
    }

    parameters {
        choice(
            name: 'NODE_TYPE',
            choices: ['server', 'agent'],
            description: 'Select node type to manage'
        )

        choice(
            name: 'ACTION',
            choices: ['install', 'uninstall'],
            description: 'Choose whether to install or uninstall RKE2'
        )
    }

    stages {
        stage('Checkout') {
            steps {
                git url: "${REPO_URL}", branch: 'main'
            }
        }

        stage('Install RKE2 Server') {
            when {
                allOf {
                    expression { params.NODE_TYPE == 'server' }
                    expression { params.ACTION == 'install' }
                }
            }
            steps {
                echo 'Installing RKE2 Server...'
                sh "chmod +x ${INSTALL_SERVER_SCRIPT}"
                sh "./${INSTALL_SERVER_SCRIPT}"
            }
        }

        stage('Verify RKE2 Server Installation') {
            when {
                allOf {
                    expression { params.NODE_TYPE == 'server' }
                    expression { params.ACTION == 'install' }
                }
            }
            steps {
                sh """
                    chmod +x ${SET_KUBECONFIG_SCRIPT}
                    . ${SET_KUBECONFIG_SCRIPT}
                    kubectl get nodes -o wide || echo "kubectl not found or RKE2 server is not running."
                """
            }
        }

        stage('Uninstall RKE2 Server') {
            when {
                allOf {
                    expression { params.NODE_TYPE == 'server' }
                    expression { params.ACTION == 'uninstall' }
                }
            }
            steps {
                echo 'Uninstalling RKE2 Server...'
                sh "chmod +x ${UNINSTALL_SERVER_SCRIPT}"
                sh "./${UNINSTALL_SERVER_SCRIPT}"
            }
        }

        stage('Install RKE2 Agents (Parallel)') {
            when {
                allOf {
                    expression { params.NODE_TYPE == 'agent' }
                    expression { params.ACTION == 'install' }
                }
            }
            steps {
                script {
                    def workerNodes = ['192.168.1.7', '192.168.1.8']  // Add your worker IPs here

                    def parallelInstalls = [:]

                    for (ip in workerNodes) {
                        def nodeIp = ip
                        parallelInstalls["Install on ${nodeIp}"] = {
                            echo "Installing RKE2 Agent on ${nodeIp}..."
                            sh "chmod +x ${INSTALL_AGENT_SCRIPT}"
                            sh "ssh root@${nodeIp} 'bash -s' < ${INSTALL_AGENT_SCRIPT}"
                        }
                    }

                    parallel parallelInstalls
                }
            }
        }

        stage('Uninstall RKE2 Agents (Parallel)') {
            when {
                allOf {
                    expression { params.NODE_TYPE == 'agent' }
                    expression { params.ACTION == 'uninstall' }
                }
            }
            steps {
                script {
                    def workerNodes = ['192.168.1.7', '192.168.1.8']  // Add your worker IPs here

                    def parallelUninstalls = [:]

                    for (ip in workerNodes) {
                        def nodeIp = ip
                        parallelUninstalls["Uninstall on ${nodeIp}"] = {
                            echo "Uninstalling RKE2 Agent from ${nodeIp}..."
                            sh "chmod +x ${UNINSTALL_AGENT_SCRIPT}"
                            sh "ssh root@${nodeIp} 'bash -s' < ${UNINSTALL_AGENT_SCRIPT}"
                        }
                    }

                    parallel parallelUninstalls
                }
            }
        }
    }

    post {
        success {
            echo "✅ ${params.NODE_TYPE} ${params.ACTION} completed successfully."
        }
        failure {
            echo "❌ ${params.NODE_TYPE} ${params.ACTION} failed."
        }
    }
}
