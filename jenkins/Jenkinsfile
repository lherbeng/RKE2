pipeline {
    agent { label 'agent1' }

    environment {
        REPO_URL = 'https://github.com/lherbeng/RKE2.git'
        SCRIPT_PATH = 'rancher/install_rke2_server.sh'
        KUBECONFIG = '/etc/rancher/rke2/rke2.yaml'
    }

    stages {
        stage('Checkout') {
            steps {
                git url: "${REPO_URL}", branch: 'main'
            }
        }

        stage('Install RKE2 Server') {
            steps {
                sh """
                    set -e
                    chmod +x ${SCRIPT_PATH}
                    ./${SCRIPT_PATH}
                """
            }
        }

        stage('Wait for RKE2 to Start') {
            steps {
                script {
                    def max_retries = 10
                    def retry_count = 0
                    def rke2_ready = false

                    while (retry_count < max_retries && !rke2_ready) {
                        retry_count++
                        echo "Checking RKE2 service status... Attempt ${retry_count}/${max_retries}"
                        
                        def status = sh(
                            script: "systemctl is-active rke2-server || echo 'inactive'",
                            returnStdout: true
                        ).trim()
                        
                        if (status == 'active') {
                            rke2_ready = true
                        } else {
                            sleep 10
                        }
                    }

                    if (!rke2_ready) {
                        error "RKE2 server did not start after ${max_retries} attempts."
                    }
                }
            }
        }

        stage('Verify KUBECONFIG') {
            steps {
                sh """
                    set -e
                    if [ -f ${KUBECONFIG} ]; then
                        echo "KUBECONFIG file found."
                        ls -l ${KUBECONFIG}
                    else
                        echo "KUBECONFIG file does not exist or is not accessible."
                        exit 1
                    fi
                """
            }
        }

        stage('Verify RKE2 Installation') {
            steps {
                sh """
                    set -e
                    export KUBECONFIG=${KUBECONFIG}
                    which kubectl || { echo 'kubectl not found.'; exit 1; }
                    kubectl get nodes -o wide || { echo 'Failed to communicate with RKE2 server.'; exit 1; }
                """
            }
        }
    }

    post {
        success {
            echo 'RKE2 Server installed and verified successfully!'
        }
        failure {
            echo 'RKE2 Server installation or verification failed.'
        }
    }
}
